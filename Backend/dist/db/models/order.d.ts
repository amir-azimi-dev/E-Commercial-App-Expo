import mongoose, { HydratedDocument, InferSchemaType } from "mongoose";
declare const orderSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
    autoCreate: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}>, {}, mongoose.ResolveSchemaOptions<{
    timestamps: true;
    autoCreate: true;
}>> & mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}> & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}>;
declare const OrderModel: mongoose.Model<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    orderItems: mongoose.Types.DocumentArray<{
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.mongo.BSON.ObjectId, any, {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    phone?: unknown;
    city?: unknown;
    zip?: unknown;
    country?: unknown;
    createdAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    updatedAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    status?: unknown;
    totalPrice?: unknown;
    customer?: {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    } | null;
    shoppingAddress1?: unknown;
    shoppingAddress2?: unknown;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    orderItems: mongoose.Types.DocumentArray<{
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.mongo.BSON.ObjectId, any, {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    phone?: unknown;
    city?: unknown;
    zip?: unknown;
    country?: unknown;
    createdAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    updatedAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    status?: unknown;
    totalPrice?: unknown;
    customer?: {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    } | null;
    shoppingAddress1?: unknown;
    shoppingAddress2?: unknown;
}, {}, {
    timestamps: true;
    autoCreate: true;
}> & {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    orderItems: mongoose.Types.DocumentArray<{
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.mongo.BSON.ObjectId, any, {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    phone?: unknown;
    city?: unknown;
    zip?: unknown;
    country?: unknown;
    createdAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    updatedAt?: {
        toJSON?: {} | null;
        [Symbol.toPrimitive]?: {} | null;
        toString?: {} | null;
        toLocaleString?: {} | null;
        toDateString?: {} | null;
        toTimeString?: {} | null;
        toLocaleDateString?: {} | null;
        toLocaleTimeString?: {} | null;
        getTime?: {} | null;
        getFullYear?: {} | null;
        getUTCFullYear?: {} | null;
        getMonth?: {} | null;
        getUTCMonth?: {} | null;
        getDate?: {} | null;
        getUTCDate?: {} | null;
        getDay?: {} | null;
        getUTCDay?: {} | null;
        getHours?: {} | null;
        getUTCHours?: {} | null;
        getMinutes?: {} | null;
        getUTCMinutes?: {} | null;
        getSeconds?: {} | null;
        getUTCSeconds?: {} | null;
        getMilliseconds?: {} | null;
        getUTCMilliseconds?: {} | null;
        getTimezoneOffset?: {} | null;
        setTime?: {} | null;
        setMilliseconds?: {} | null;
        setUTCMilliseconds?: {} | null;
        setSeconds?: {} | null;
        setUTCSeconds?: {} | null;
        setMinutes?: {} | null;
        setUTCMinutes?: {} | null;
        setHours?: {} | null;
        setUTCHours?: {} | null;
        setDate?: {} | null;
        setUTCDate?: {} | null;
        setMonth?: {} | null;
        setUTCMonth?: {} | null;
        setFullYear?: {} | null;
        setUTCFullYear?: {} | null;
        toUTCString?: {} | null;
        toISOString?: {} | null;
        getVarDate?: {} | null;
        valueOf?: {} | null;
    } | null;
    status?: unknown;
    totalPrice?: unknown;
    customer?: {
        prototype?: unknown;
        cacheHexString?: unknown;
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    } | null;
    shoppingAddress1?: unknown;
    shoppingAddress2?: unknown;
} & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
    autoCreate: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}>, {}, mongoose.ResolveSchemaOptions<{
    timestamps: true;
    autoCreate: true;
}>> & mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    phone: string;
    city: string;
    zip: string;
    country: string;
    orderItems: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    }[];
    status: "Pending" | "Processing" | "Shipped" | "Delivered" | "Rejected";
    totalPrice: number;
    customer: {
        prototype?: mongoose.Types.ObjectId | null;
        cacheHexString?: unknown;
        generate?: {} | null;
        createFromTime?: {} | null;
        createFromHexString?: {} | null;
        createFromBase64?: {} | null;
        isValid?: {} | null;
    };
    shoppingAddress1: string;
    shoppingAddress2: string;
}> & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}>>;
type Order = InferSchemaType<typeof orderSchema>;
export type OrderDocument = HydratedDocument<Order> & {
    createdAt: Date;
    updatedAt: Date;
};
export default OrderModel;
//# sourceMappingURL=order.d.ts.map